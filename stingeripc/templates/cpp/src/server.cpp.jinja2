
#include <vector>
#include <boost/format.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/functional/hash.hpp>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>
#include <rapidjson/error/en.h>
#include <rapidjson/document.h>

#include "server.hpp"
#include "enums.hpp"
#include "ibrokerconnection.hpp"


constexpr const char {{stinger.name | UpperCamelCase}}Server::NAME[];
constexpr const char {{stinger.name | UpperCamelCase}}Server::INTERFACE_VERSION[];

{{stinger.name | UpperCamelCase}}Server::{{stinger.name | UpperCamelCase}}Server(std::shared_ptr<IBrokerConnection> broker) : _broker(broker) {
    _broker->AddMessageCallback([this](const std::string& topic, const std::string& payload)
    {
        _receiveMessage(topic, payload);
    });
}

void {{stinger.name | UpperCamelCase}}Server::_receiveMessage(const std::string& topic, const std::string& payload)
{
    {%for method_name, method in stinger.methods.items()%}
    if (_broker->TopicMatchesSubscription(topic, "{{method.topic}}"))
    {
        rapidjson::Document doc;
        try {
            if (_{{method_name | camelCase}}Handler)
            {
                rapidjson::ParseResult ok = doc.Parse(payload.c_str());
                if (!ok)
                {
                    //Log("Could not JSON parse {{sig_name}} signal payload.");
                    throw std::runtime_error(rapidjson::GetParseError_En(ok.Code()));
                }

                if (!doc.IsObject()) {
                    throw std::runtime_error("Received payload is not an object");
                }
                boost::optional<std::string> optClientId;
                boost::optional<std::string> optCorrelationId;

                if (doc.HasMember("clientId") && doc["clientId"].IsString())
                {
                    optClientId = doc["clientId"].GetString();
                }

                if (doc.HasMember("correlationId") && doc["correlationId"].IsString())
                {
                    optCorrelationId = doc["correlationId"].GetString();
                }

                _call{{method_name | camelCase}}Handler(topic, doc, optClientId, optCorrelationId);
            }
        }
        catch (const boost::bad_lexical_cast&)
        {
            // We couldn't find an integer out of the string in the topic name,
            // so we are dropping the message completely. 
            // TODO: Log this failure
        }
    }
    {%endfor%}
}

{%for sig_name, sig in stinger.signals.items()%}
boost::future<bool> {{stinger.name | UpperCamelCase}}Server::emit{{sig_name | UpperCamelCase}}Signal({%for arg in sig.arg_list%}{{arg.cpp_type}} {{arg.name}}{%if not loop.last%}, {%endif%}{%endfor%})
{
    rapidjson::Document doc;
    doc.SetObject();
    {%for arg in sig.arg_list%}
    {%-if arg.arg_type.name.lower() == 'value'%}
    {%-if arg.type.name.lower() == 'string'%}
    { // restrict scope
        rapidjson::Value tempStringValue;
        tempStringValue.SetString({{arg.name}}.c_str(), {{arg.name}}.size(), doc.GetAllocator());
        doc.AddMember("{{arg.name}}", tempStringValue, doc.GetAllocator());
    }
    {%-else%}
    doc.AddMember("{{arg.name}}", {{arg.name}}, doc.GetAllocator());
    {%-endif%}
    {%elif arg.arg_type.name.lower() == 'enum'%}
    doc.AddMember("{{arg.name}}", static_cast<int>({{arg.name}}), doc.GetAllocator());
    {%-endif-%}
    {%endfor%}
    rapidjson::StringBuffer buf;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buf);
    doc.Accept(writer);
    return _broker->Publish("{{sig.topic}}", buf.GetString(), 1, false);
}
{%endfor%}

{%for method_name, method in stinger.methods.items()%}
void {{stinger.name | UpperCamelCase}}Server::register{{method_name | UpperCamelCase}}Handler(std::function<{{method.return_value.cpp_type}}({%for arg in method.arg_list%}{{arg.cpp_type}}{%if not loop.last%}, {%endif%}{%endfor%})> func)
{
    _{{method_name | camelCase}}Handler = func;
}
{%endfor%}

{%for method_name, method in stinger.methods.items()%}
void {{stinger.name | UpperCamelCase}}Server::_call{{method_name | camelCase}}Handler(const std::string& topic, const rapidjson::Document& doc, boost::optional<std::string> clientId, boost::optional<std::string> correlationId) const
{
    if (_{{method_name | camelCase}}Handler) {
        {%for arg in method.arg_list%}
        {{arg.cpp_temp_type}} temp{{arg.name|UpperCamelCase}};
        { // Scoping
            rapidjson::Value::ConstMemberIterator itr = doc.FindMember("{{arg.name}}");
            if (itr != doc.MemberEnd() && itr->value.Is{{arg.cpp_rapidjson_type}}()) {
                {%if arg.arg_type.name.lower() == 'value'%}
                temp{{arg.name|UpperCamelCase}} = itr->value.Get{{arg.cpp_rapidjson_type}}();
                {%elif arg.arg_type.name.lower() == 'enum'%}
                temp{{arg.name|UpperCamelCase}} = static_cast<{{arg.cpp_type}}>(itr->value.Get{{arg.cpp_rapidjson_type}}());
                {%endif%}
            } else {
                throw std::runtime_error("Received payload doesn't have required value/type");
            }
        }
        {%endfor%}

        auto ret = _{{method_name | camelCase}}Handler({%for arg in method.arg_list%}temp{{arg.name|UpperCamelCase}}{%if not loop.last%}, {%endif%}{%endfor%});

        if (clientId)
        {
            std::stringstream ss;
            ss << boost::format("{{method.response_topic('%1%')}}") % *clientId;
            std::string responseTopic = ss.str();

            rapidjson::Document responseJson;
            responseJson.SetObject();
            if (correlationId) {
                rapidjson::Value correlationIdValue;
                correlationIdValue.SetString(correlationId->c_str(), correlationId->size(), responseJson.GetAllocator());
                responseJson.AddMember("correlationId", correlationIdValue, responseJson.GetAllocator());
            }

            rapidjson::StringBuffer buf;
            rapidjson::Writer<rapidjson::StringBuffer> writer(buf);
            responseJson.Accept(writer);
            _broker->Publish(responseTopic, buf.GetString(), 2, true);
        }
    }
}
{%endfor%}
