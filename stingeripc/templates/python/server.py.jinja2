"""
DO NOT MODIFY THIS FILE. {# Unless you see this comment, in which case you are modifying the template. #} It is automatically generated and changes will be over-written
on the next generation.

This is the Server for the {{stinger.name}} interface.
"""

import json
import logging

logging.basicConfig(level=logging.DEBUG)

from typing import Callable, Dict, Any, Optional, List
from connection import BrokerConnection
from method_codes import *
import {{stinger.get_enum_module_name()}} as {{stinger.get_enum_module_alias()}}
{%macro method_type_annotation(method) %}Callable[[{%for arg in method.arg_list%}{{arg.python_type}}{%if not loop.last%}, {%endif%}{%endfor%}], {{method.return_value.python_type}}]{%endmacro%}

class {{stinger.name}}Server:

    def __init__(self, connection: BrokerConnection):
        self._logger = logging.getLogger('{{stinger.name}}Server')
        self._logger.setLevel(logging.DEBUG)
        self._logger.debug("Initializing {{stinger.name}}Server")
        self._conn = connection
        self._conn.set_message_callback(self._receive_message)
        self._conn.set_last_will(topic="{{stinger.interface_info.0}}", payload=None, qos=1, retain=True)
        {%for p,v in stinger.params.items()-%}
        self._{{p}} = {{v.payload.initialValue}}
        self._conn.subscribe("{{topics.get_param_value(stinger.name, false, p)}}", self.set_{{p}})
        self.changed_value_callback_for_{{p}} = None
        self._publish_interface_info()
        {%endfor-%}
        {%-for method in stinger.methods.values()%}
        self._conn.subscribe("{{method.topic}}")
        {%endfor-%}
        {%for method_name, method in stinger.methods.items()-%}
        self._{{method_name|snake_case}}_method_handler: Optional[{{method_type_annotation(method)}}] = None
        {%endfor%}
    
    def _receive_message(self, topic: str, payload: str, properties: Dict[str, Any]):
        """ This is the callback that is called whenever any message is received on a subscribed topic.
        """
        self._logger.debug("Received message to %s", topic)
        {%if stinger.methods | length > 0 -%}
        {%for method_name, method in stinger.methods.items()-%}
        {%if not loop.first%}el{%endif%}if self._conn.is_topic_sub(topic, "{{method.topic}}"):
            try:
                payload_obj = json.loads(payload)
            except json.decoder.JSONDecodeError:
                self._logger.warning("Invalid JSON payload received at topic '%s'", topic)
            else:
                self._process_{{method_name | snake_case}}_call(topic, payload_obj, properties)
        {%endfor%}
        {%-else%}pass{%-endif%}

    def _publish_interface_info(self):
        self._conn.publish("{{stinger.interface_info.0}}", '''{{stinger.interface_info.1 | tojson}}''', qos=1, retain=True)

    {%for sig_name, sig in stinger.signals.items()-%}
    def emit_{{sig_name}}(self, {%for arg in sig.arg_list%}{{arg.name}}: {{arg.python_type}}{%if not loop.last%}, {%endif%}{%endfor%}):
        """ Server application code should call this method to emit the '{{sig_name}}' signal.
        """
        {%-for arg in sig.arg_list%}
        if not isinstance({{arg.name}}, {{arg.python_type}}):
            raise ValueError(f"The '{{arg.name}}' value must be {{arg.python_type}}.")
        {%-endfor%}
        
        payload = { {%-for arg in sig.arg_list%}
            {%if arg.arg_type.name.lower() == 'primitive'%}"{{arg.name}}": {{arg.python_type}}({{arg.name}}),{%endif-%}
            {%if arg.arg_type.name.lower() == 'enum'%}"{{arg.name}}": {{arg.python_type}}({{arg.name}}).value,{%endif%}{%endfor%}
        }
        self._conn.publish("{{sig.topic}}", json.dumps(payload), qos=1, retain=False)

    {%endfor%}

    {%for method_name, method in stinger.methods.items()%}
    def handle_{{method_name | snake_case}}(self, handler: {{method_type_annotation(method)}}):
        """ This is a decorator to decorate a method that will handle the '{{method_name}}' method calls.
        """
        if self._{{method_name|snake_case}}_method_handler is None and handler is not None:
            self._{{method_name|snake_case}}_method_handler = handler
        else:
            raise Exception("Method handler already set")

    def _process_{{method_name | snake_case}}_call(self, topic: str, payload: Dict[str, Any], properties: Dict[str, Any]):
        """ This processes a call to the '{{method_name}}' method.  It deserializes the payload to find the method arguments,
        then calls the method handler with those arguments.  It then builds and serializes a response and publishes it to the response topic.
        """
        correlation_id = properties.get('CorrelationData') # type: Optional[bytes]
        response_topic = properties.get('ResponseTopic') # type: Optional[str]
        self._logger.info("Correlation Data %s", correlation_id)
        if self._{{method_name|snake_case}}_method_handler is not None:
            method_args = [] # type: List[Any]
            {%for arg in method.arg_list -%}
            if "{{arg.name}}" in payload:
                if not isinstance(payload["{{arg.name}}"], {{arg.python_type}}):
                    self._logger.warning("The '{{arg.name}}' property in the payload to '%s' wasn't the correct type.  It should have been {{arg.python_type}}.", topic)
                    return
                else:
                    method_args.append(payload["{{arg.name}}"])
            else:
                self._logger.info("The '{{arg.name}}' property in the payload to '%s' wasn't present", topic)
            {%endfor%}
            
            if response_topic is not None:
                return_json = ""
                debug_msg = None # type: Optional[str]
                try:
                    return_struct = self._{{method_name|snake_case}}_method_handler(*method_args)
                    self._logger.debug("Return value is %s", return_struct)
                    {%if method.return_value is none%}
                        return_json = "{}"
                    {%else%}
                    if return_struct is not None:
                        {%-if method.return_value.arg_type.name.lower() == "primitive" %}
                        return_json = json.dumps({
                            "{{method.return_value.name}}": return_struct
                        })
                        {%-elif method.return_value.arg_type.name.lower() == "enum" %}
                        return_json = json.dumps({
                            "{{method.return_value.name}}": return_struct.value
                        })
                        {%-elif method.return_value.arg_type.name.lower() == "struct" %}
                        return_json = json.dumps({
                            "{{method.return_value.name}}": return_struct.model_dump_json()
                        })
                        {%else%}
                        // else
                        return_json = return_struct.model_dump_json()
                        {%endif%}
                    {%-endif%}
                except Exception as e:
                    self._logger.exception("Exception while handling {{method_name}}", exc_info=e)
                    return_code = MethodResultCode.SERVER_ERROR
                    debug_msg = str(e)
                else:
                    return_code = MethodResultCode.SUCCESS
                    debug_msg = None

                self._conn.publish(response_topic, return_json, qos=1, retain=False, 
                    correlation_id=correlation_id, return_value=return_code, debug_info=debug_msg)
    {%endfor%}

    {%for p,v in stinger.params.items()-%}
    {%-set args = payload(v['payload']) %}
    def set_{{p}}(self, {%for arg in args%}{{arg.name}}{%if not loop.last%}, {%endif%}{%endfor%}):
        changed = False
        {%for arg in payload(v['payload'])-%}
        if {{arg.name}} != self._{{p}}['{{arg.name}}']:
            changed = True
            self._{{p}}['{{arg.name}}'] = {{arg.name}}
        {%endfor-%}
        if changed:
            topic = "{{topics.get_param_value(stinger.name, false, p)}}"
            self._conn.publish(topic, self._{{p}}, 1, True)
            if self.changed_value_callback_for_{{p}} is not None:
                self.changed_value_callback_for_{{p}}({%for arg in args%}{{arg.name}}{%if not loop.last%}, {%endif%}{%endfor%})

    def get_{{p}}(self):
        {%if args | length > 1 -%}
        return self._{{p}}
        {%-else-%}
        return self._{{p}}[args[0].name]
        {%-endif%}
    {%endfor%}

class {{stinger.name}}ServerBuilder:
    """
    This is a builder for the {{stinger.name}}Server.  It is used to create a server with the desired parameters.
    """

    def __init__(self, connection: BrokerConnection):
        self._conn = connection
        {%for method_name, method in stinger.methods.items()%}
        self._{{method_name|snake_case}}_method_handler: Optional[{{method_type_annotation(method)}}] = None
        {%-endfor%}
    {%for method_name, method in stinger.methods.items()%}
    def handle_{{method_name | snake_case}}(self, handler: {{method_type_annotation(method)}}):
        if self._{{method_name|snake_case}}_method_handler is None and handler is not None:
            self._{{method_name|snake_case}}_method_handler = handler
        else:
            raise Exception("Method handler already set")
    {%endfor%}
    def build(self) -> {{stinger.name}}Server:
        new_server = {{stinger.name}}Server(self._conn)
        {%for method_name, method in stinger.methods.items()%}
        if self._{{method_name|snake_case}}_method_handler is not None:
            new_server.handle_{{method_name|snake_case}}(self._{{method_name|snake_case}}_method_handler)
        {%-endfor%}
        return new_server

if __name__ == '__main__':
    """
    This shows an example on how to run the code.  Ideally, your app should do something similar, but use the methods in
    a more meaningful way.
    """
    from time import sleep
    import signal
    {%set broker = stinger.get_example_broker()%}
    from connection import {{broker.class_name}}

    conn = {{broker.class_name}}({%if broker.hostname is none%}'localhost', 1883{%endif%})
    server = {{stinger.name}}Server(conn)

    {%for method_name, method in stinger.methods.items()%}
    @server.handle_{{method_name | snake_case}}
    def {{method_name | snake_case}}({%for arg in method.arg_list%}{{arg.name}}: {{arg.python_type}}{%if not loop.last%}, {%endif%}{%endfor%}) -> {{method.return_value.python_type}}:
        print(f"Running {{method_name | snake_case}}'({%for arg in method.arg_list %}{ {{-arg.name-}} }{%if not loop.last%}, {%endif%}{%endfor%})'")
        return {{method.return_value.get_random_example_value('python')}}
    {%endfor%}

    print("Ctrl-C will stop the program.")

    while True:
        try:
            {%for sig_name, sig in stinger.signals.items()-%}
            server.emit_{{sig_name}}({%for arg in sig.arg_list%}{{arg.get_random_example_value()}}{%if not loop.last%}, {%endif%}{%endfor%})
            {%endfor%}
            sleep(4)
            {%for sig_name, sig in stinger.signals.items()-%}
            server.emit_{{sig_name}}({%for arg in sig.arg_list%}{{arg.name}}={{arg.get_random_example_value()}}{%if not loop.last%}, {%endif%}{%endfor%})
            {%endfor%}
            sleep(6)
        except KeyboardInterrupt:
            break


    signal.pause()
