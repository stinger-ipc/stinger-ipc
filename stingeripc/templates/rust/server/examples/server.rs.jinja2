/*
DO NOT MODIFY THIS FILE {# unless you see this comment #}.  It is automatically generated and changes will be over-written
on the next generation.

It contains enumerations used by the {{stinger.name}} interface.
*/
use futures::{executor::block_on};
use {{stinger.name | snake_case}}_server::{{stinger.name}}Server;
use connection::Connection;
{%if stinger.methods | length > 0 %}use connection::return_structs::MethodResultCode;{%endif%}

{%for method_name, method in stinger.methods.items()%}
fn {{method_name|snake_case}}_handler({%for arg in method.arg_list%}_{{arg.name|snake_case}}: {{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%}) -> Result<{{method.return_value.rust_type}}, MethodResultCode> {
    println!("Handling {{method_name}}");
    {%-if method.return_value.arg_type.name.lower() == 'struct'%}
    let rv = {{method.return_value.rust_type}} {
        {%for arg in method.return_value.members%}
        {{arg.name}}: {{arg.get_random_example_value(lang="rust")}},
        {%endfor%}
    };
    Ok(rv)
    {%else%}
    Ok({{method.return_value.get_random_example_value(lang="rust")}})
    {%endif%}
}
{%endfor%}

fn main() {
    {%set broker = stinger.get_example_broker()%}
    let connection = Connection::new_{{broker.class_name|snake_case}}({%if broker.hostname is none%}String::from("localhost"){%if broker.port is none%}, {%endif%}{%endif%}{%if broker.port is none%}1883{%endif%});
    let mut server = {{stinger.name}}Server::new(connection);
    {%for method_name, method in stinger.methods.items()%}
    server.set_method_handler_for_{{method_name|snake_case}}({{method_name|snake_case}}_handler);
    {%endfor%}
    {%for sig_name, sig in stinger.signals.items()%}
    server.emit_{{sig_name|snake_case}}({%for arg in sig.arg_list%}{{arg.get_random_example_value(lang="rust")}}{%if not loop.last%}, {%endif%}{%endfor%});
    {%endfor%}

    block_on(async {
        server.process().await;
    });
    // Ctrl-C to stop
}
