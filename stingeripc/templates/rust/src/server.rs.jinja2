//! Server module for {{stinger.name}} IPC
//! 
//! This module is only available when the "server" feature is enabled.


/*
DO NOT MODIFY THIS FILE{# <-- Ignore this because you are editing the template file. #}.  It is automatically generated and changes will be over-written
on the next generation.

This is the Server for the {{stinger.name}} interface.
*/

use mqttier::{MqttierClient{%if stinger.methods|length > 0 or stinger.properties|length > 0 %}, ReceivedMessage{%endif%}, PublishResult};

#[allow(unused_imports)]
use crate::payloads::{MethodReturnCode, *};
use std::any::Any;
{%if stinger.methods|length > 0 %}
use async_trait::async_trait;
use tokio::sync::Mutex as AsyncMutex;
use std::sync::{Arc, Mutex};
{%endif%}
{%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
use serde_json;
use tokio::sync::{mpsc{%if stinger.properties|length > 0 %}, watch{%endif%}};
{%endif%}
use tokio::task::JoinError;
use std::future::Future;
use std::pin::Pin;
type SentMessageFuture = Pin<Box<dyn Future<Output = Result<(), MethodReturnCode>> + Send>>;
#[cfg(feature = "server")]
#[allow(unused_imports)]
use tracing::{debug, info, warn, error};

{%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
/// This struct is used to store all the MQTTv5 subscription ids
/// for the subscriptions the client will make.
#[derive(Clone, Debug)]
struct {{stinger.name | UpperCamelCase }}ServerSubscriptionIds {
    {%for method_name, method in stinger.methods.items()-%}
    {{method_name | snake_case}}_method_req: usize,
    {%endfor%}
    {%for prop_name, prop in stinger.properties.items()-%}{%if not prop.read_only %}
    {{prop_name | snake_case}}_property_update: usize,
    {%endif%}{%endfor%}
}

{%if stinger.properties | length > 0%}
#[derive(Clone)]
struct {{stinger.name | UpperCamelCase}}Properties {
    {%for prop_name, prop in stinger.properties.items()-%}
    {{prop_name | snake_case}}_topic: Arc<String>,
    {%-if prop.arg_list | length > 1%}
    {{prop_name | snake_case}}: Arc<Mutex<Option<{{prop.rust_type}}>>>,
    {{prop_name | snake_case}}_tx_channel: watch::Sender<Option<{{prop.rust_type}}>>,
    {%-else%}
    {{prop_name | snake_case}}: Arc<Mutex<Option<{{prop.arg_list[0].rust_type}}>>>,
    {{prop_name | snake_case}}_tx_channel: watch::Sender<Option<{{prop.arg_list[0].rust_type}}>>,
    {%endif%}
    {%-endfor%}
}
{%endif%}
{%endif%}{# any methods or properties #}
#[derive(Clone)]
pub struct {{stinger.rust.server_struct_name}} {
    mqttier_client: MqttierClient,
    {%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
    /// Temporarily holds the receiver for the MPSC channel.  The Receiver will be moved
    /// to a process loop when it is needed.  MQTT messages will be received with this.
    msg_streamer_rx: Arc<Mutex<Option<mpsc::Receiver<ReceivedMessage>>>>,

    /// The Sender side of MQTT messages that are received from the broker.  This tx
    /// side is cloned for each subscription made.
    #[allow(dead_code)]
    msg_streamer_tx: mpsc::Sender<ReceivedMessage>,
    {%endif%}
    {%if stinger.methods|length > 0 %}
    /// Struct contains all the method handlers.
    method_handlers: Arc<AsyncMutex<Box<dyn {{stinger.name | UpperCamelCase }}MethodHandlers>>>,
    {%endif%}
    {%if stinger.properties|length > 0%}
    /// Struct contains all the properties.
    properties: {{stinger.name | UpperCamelCase}}Properties,
    {%endif%}
    {%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
    /// Subscription IDs for all the subscriptions this makes.
    subscription_ids: {{stinger.name | UpperCamelCase }}ServerSubscriptionIds,
    {%endif%}

    /// Copy of MQTT Client ID
    #[allow(dead_code)]
    pub client_id: String,

    pub instance_id: String,
}

impl {{stinger.rust.server_struct_name}} {
    pub async fn new(connection: &mut MqttierClient{%if stinger.methods|length > 0%}, method_handlers: Arc<AsyncMutex<Box<dyn {{stinger.name | UpperCamelCase }}MethodHandlers>>> {%endif%}, instance_id: String) -> Self {
        {%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
        // Create a channel for messages to get from the MqttierClient object to this {{stinger.rust.server_struct_name}} object.
        // The Connection object uses a clone of the tx side of the channel.
        let (message_received_tx, message_received_rx) = mpsc::channel::<ReceivedMessage>(64);

        // Create method handler struct
        {%for method_name, method in stinger.methods.items()-%}
        let subscription_id_{{method_name | snake_case}}_method_req = connection.subscribe(format!("{{method.topic}}", instance_id), 2, message_received_tx.clone()).await;
        let subscription_id_{{method_name | snake_case}}_method_req = subscription_id_{{method_name | snake_case}}_method_req.unwrap_or_else(|_| usize::MAX);
        {%endfor%}
        {%for prop_name, prop in stinger.properties.items()-%}{%if not prop.read_only %}
        let subscription_id_{{prop_name | snake_case}}_property_update = connection.subscribe(format!("{{prop.update_topic}}", instance_id), 2, message_received_tx.clone()).await;
        let subscription_id_{{prop_name | snake_case}}_property_update = subscription_id_{{prop_name | snake_case}}_property_update.unwrap_or_else(|_| usize::MAX);
        {%else-%}
        {%endif%}{%endfor%}
        
        // Create structure for subscription ids.
        let sub_ids = {{stinger.name | UpperCamelCase }}ServerSubscriptionIds {
            {%for method_name, method in stinger.methods.items()-%}
            {{method_name | snake_case}}_method_req: subscription_id_{{method_name | snake_case}}_method_req,
            {%endfor%}
            {%for prop_name, prop in stinger.properties.items()-%}{%if not prop.read_only %}
            {{prop_name | snake_case}}_property_update: subscription_id_{{prop_name | snake_case}}_property_update,
            {%endif%}{%endfor%}
        };
        {%endif%}

        {%if stinger.properties|length > 0%}
        let property_values = {{stinger.name | UpperCamelCase}}Properties {
        {%-for prop_name, prop in stinger.properties.items()%}
            {{prop_name | snake_case}}_topic: Arc::new(format!("{{prop.value_topic}}", instance_id)),

            {{prop_name | snake_case}}: Arc::new(Mutex::new(None)),
            {{prop_name | snake_case}}_tx_channel: watch::channel(None).0,

        {%-endfor%}
        };
        {%endif%}



        {{stinger.rust.server_struct_name}} {
            mqttier_client: connection.clone(),
            {%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
            msg_streamer_rx: Arc::new(Mutex::new(Some(message_received_rx))),
            msg_streamer_tx: message_received_tx,{%if stinger.methods | length > 0 %}
            method_handlers: method_handlers,{%endif%}{%if stinger.properties | length > 0 %}
            properties: property_values,{%endif%}
            subscription_ids: sub_ids,
            {%endif%}
            client_id: connection.client_id.to_string(),
            instance_id,
        }
    }

    /// Converts a oneshot receiver for the publish result into a Future that resolves to
    pub async fn oneshot_to_future(publish_oneshot: tokio::sync::oneshot::Receiver<PublishResult>) -> SentMessageFuture {
        Box::pin(async move {
            let publish_result = publish_oneshot.await;
            match publish_result {
                Ok(PublishResult::Acknowledged(_))
                | Ok(PublishResult::Completed(_))
                | Ok(PublishResult::Sent(_)) => Ok(()),

                Ok(PublishResult::TimedOut) => Err(MethodReturnCode::Timeout(
                    "Timed out publishing signal".to_string(),
                )),

                Ok(PublishResult::SerializationError(s)) => {
                    Err(MethodReturnCode::SerializationError(s))
                }

                Ok(PublishResult::Error(s)) => Err(MethodReturnCode::TransportError(s)),

                Err(_) => Err(MethodReturnCode::UnknownError(
                    "Error publishing signal".to_string(),
                )),
            }
        })
    }

    pub async fn wrap_return_code_in_future(rc: MethodReturnCode) -> SentMessageFuture {
        Box::pin(async move {
            match rc {
                MethodReturnCode::Success => Ok(()),
                _ => Err(rc),
            }
        })
    }
    {%if stinger.methods | length > 0 or stinger.properties | length > 0 %}
    /// Publishes an error response to the given response topic with the given correlation data.
    async fn publish_error_response(publisher: MqttierClient, response_topic: Option<String>, correlation_data: Option<Vec<u8>>, err: &MethodReturnCode) {
        if let Some(resp_topic) = response_topic {
            let corr_data = correlation_data.unwrap_or_default();
            let (return_code, debug_message) = err.to_code();
            let _ = publisher.publish_error_response(resp_topic, debug_message.unwrap_or_default(), corr_data, return_code).await;
        } else {
            info!("No response topic found in message properties; cannot send error response.");
        }
    }
    {%endif-%}
    {%for sig_name, sig in stinger.signals.items()-%}
    /// Emits the {{sig_name}} signal with the given arguments.
    pub async fn emit_{{sig_name|snake_case}}(&mut self, {%for arg in sig.arg_list%}{{arg.name|snake_case}}: {{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%}) -> SentMessageFuture {
        let data = {{sig_name|UpperCamelCase}}SignalPayload {
            {%for arg in sig.arg_list%}
        {{arg.name}}: {{arg.name|snake_case}},
            {%endfor%}
        };
        let published_oneshot = self.mqttier_client.publish_structure(format!("{{sig.topic}}", self.instance_id), &data).await;
        {{stinger.rust.server_struct_name}}::oneshot_to_future(published_oneshot).await
    }
    {%endfor%}
    {%for method_name, method in stinger.methods.items()%}
    /// Handles a request message for the {{method_name}} method.
    async fn handle_{{method_name|snake_case}}_request(publisher: MqttierClient, handlers: Arc<AsyncMutex<Box<dyn {{stinger.name | UpperCamelCase }}MethodHandlers>>>, msg: ReceivedMessage) {
        let opt_corr_data = msg.correlation_data;
        let opt_resp_topic = msg.response_topic;
        {%if method.arg_list | length > 0 -%}
        let payload_vec = msg.payload;
        let payload_obj = serde_json::from_slice::<{{method_name | UpperCamelCase}}RequestObject>(&payload_vec);
        if payload_obj.is_err() {
            error!("Error deserializing request payload for {{method_name}}: {:?}", payload_obj.err());
            {{stinger.rust.server_struct_name}}::publish_error_response(publisher, opt_resp_topic, opt_corr_data, &MethodReturnCode::DeserializationError("Failed to deserialize request payload".to_string())).await;
            return;
        }
        // Unwrap is OK here because we just checked for error.
        let payload = payload_obj.unwrap();
        {%endif%}{# has arg_list #} 
        // call the method handler
        let rc: Result<{{method.return_value_rust_type}}, MethodReturnCode> = {
            let handler_guard = handlers.lock().await;
            handler_guard.handle_{{method_name|snake_case}}({%for arg in method.arg_list%}payload.{{arg.name}}{%if not loop.last%}, {%endif%}{%endfor%}).await
        };

        if let Some(resp_topic) = opt_resp_topic {
            let corr_data = opt_corr_data.unwrap_or_default();
            match rc {
                Ok({%if method.return_value_type is false %}_{%else%}retval{%endif%}) => {
                    {%-if method.return_value_type == "primitive" %}
                    let retval = {{method_name | UpperCamelCase}}ReturnValue {
                        {{method.return_value_property_name}}: retval,
                    };
                    {%elif method.return_value_type is false %}
                    let retval = {{method_name | UpperCamelCase}}ReturnValue {};
                    {%elif method.return_value_type == "datetime" %}
                    let retval = {{method_name | UpperCamelCase}}ReturnValue {
                        {{method.return_value_property_name}}: retval,
                    };
                    {%elif method.return_value_type == "duration" %}
                    let retval = {{method_name | UpperCamelCase}}ReturnValue {
                        {{method.return_value_property_name}}: retval,
                    };
                    {%elif method.return_value_type == "binary" %}
                    let retval = {{method_name | UpperCamelCase}}ReturnValue {
                        {{method.return_value_property_name}}: retval,
                    };
                    {%endif%}
                    let _fut_publish_result = publisher.publish_response(resp_topic, &retval, corr_data).await;
                }
                Err(err) => {
                    info!("Error occurred while handling {{method_name}}: {:?}", &err);
                    {{stinger.rust.server_struct_name}}::publish_error_response(publisher, Some(resp_topic), Some(corr_data), &err).await;
                }
            }
        } else {
            // Without a response topic, we cannot send a response.
            info!("No response topic provided, so no publishing response to `{{method_name}}`.");
        }
    }
    {%endfor%}

    {%-for prop_name, prop in stinger.properties.items()%}
    async fn publish_{{prop_name}}_value(publisher: MqttierClient, topic: String, data: {{prop.rust_type}}) -> SentMessageFuture
    {
        {%-if prop.arg_list | length == 1%}
        let new_data = {{prop_name | UpperCamelCase}}Property {
            {{prop.arg_list[0].name}}: data,
        };
        debug!("Publishing '{{prop_name}}' property value to topic {}", topic);
        let published_oneshot = publisher.publish_state(topic, &new_data, 1).await;
        {%else%}
        let published_oneshot = publisher.publish_state(topic, &data, 1).await;
        {%endif%}
        {{stinger.rust.server_struct_name}}::oneshot_to_future(published_oneshot).await
    }
    {%if not prop.read_only %}
    /// This is called because of an MQTT request to update the property value.
    /// It updates the local value, notifies any watchers, and publishes the new value.
    /// If there is an error, it can publish back if a response topic was provided.
    async fn update_{{prop_name}}_value(publisher: MqttierClient, topic: Arc<String>, data: Arc<Mutex<Option<{{prop.rust_type}}>>>, watch_sender: watch::Sender<Option<{{prop.rust_type}}>>, msg: ReceivedMessage) -> SentMessageFuture
    {
        let payload_str = String::from_utf8_lossy(&msg.payload).to_string();

        let new_data: {{prop_name | UpperCamelCase}}Property = {
            match serde_json::from_str(&payload_str) {
                Ok(data) => data,
                Err(e) => {
                    error!("Failed to parse JSON received over MQTT to update '{{prop_name}}' property: {:?}", e);
                    return {{stinger.rust.server_struct_name}}::wrap_return_code_in_future(MethodReturnCode::DeserializationError("Failed to deserialize property '{{prop_name}}' payload".to_string())).await;
                }
            }
        };

        let assignment_result = match data.lock() {
            Ok(mut guard) => {
                {%if prop.arg_list | length == 1 -%}
                *guard = Some(new_data.{{prop.arg_list[0].name}}{%if prop.arg_list[0].rust_type == 'String' %}.clone(){%endif%});
                {%else-%}
                *guard = Some(new_data.clone());
                {%endif%}
                Ok(())
            }
            Err(_e) => {
                Err(())
            }
        };
        // Since the lock is not Send, we need to be completely removed from it before calling the async method.
        if let Err(()) = assignment_result {
            return {{stinger.rust.server_struct_name}}::wrap_return_code_in_future(MethodReturnCode::ServerError(
                format!("Failed to lock mutex for updating property '{{prop_name}}'"),
            ))
            .await;
        }
        let topic2: String = topic.as_ref().clone();
        {%-if prop.arg_list | length == 1%}
        let data2 = new_data.{{prop.arg_list[0].name}}{%if prop.arg_list[0].rust_type == 'String' %}.clone(){%endif%};
        {%-else%}
        let data2 = new_data;
        {%endif%}
        let data_to_send_to_watchers = data2.clone();
        match watch_sender.send(Some(data_to_send_to_watchers)) {
            Ok(_) => {}
            Err(e) => {
                error!("Failed to notify local watchers for '{{prop_name}}' property: {:?}", e);
            }
        };
        {{stinger.rust.server_struct_name}}::publish_{{prop_name}}_value(publisher, topic2, data2).await
    }

    pub async fn watch_{{prop_name}}(&self) -> watch::Receiver<Option<{{prop.rust_type}}>> {
        self.properties.{{prop_name}}_tx_channel.subscribe()
    }

    {%endif%}{# not read only property #}
    pub async fn set_{{prop_name}}(&mut self, data: {{prop.rust_type}}) -> SentMessageFuture {
        let prop = self.properties.{{prop_name}}.clone();
        {
            if let Ok(mut locked_data) = prop.lock() {
                *locked_data = Some(data.clone());
            } else {
                return {{stinger.rust.server_struct_name}}::wrap_return_code_in_future(MethodReturnCode::ServerError(
                    format!("Failed to lock mutex for setting property '{{prop_name}}'"),
                ))
                .await;
            }
        }

        let data_to_send_to_watchers = Some(data.clone());
        let send_result = self.properties.{{prop_name}}_tx_channel.send_if_modified(|current_data| {
            if current_data != &data_to_send_to_watchers {
                *current_data = data_to_send_to_watchers;
                true
            } else {
                false
            }
        });
        if !send_result {
            debug!("Property '{{prop_name}}' value not changed, so not notifying watchers.");
            return {{stinger.rust.server_struct_name}}::wrap_return_code_in_future(MethodReturnCode::Success).await;
        } else {
            let publisher2 = self.mqttier_client.clone();
            let topic2 = self.properties.{{prop_name}}_topic.as_ref().clone();
            {{stinger.rust.server_struct_name}}::publish_{{prop_name}}_value(publisher2, topic2, data).await
        }
    }
    {%endfor%}

    /// Starts the tasks that process messages received.
    /// In the task, it loops over messages received from the rx side of the message_receiver channel.
    /// Based on the subscription id of the received message, it will call a function to handle the
    /// received message.
    pub async fn run_loop(&mut self) -> Result<(), JoinError> {
        // Make sure the MqttierClient is connected and running.
        let _ = self.mqttier_client.run_loop().await;

        {%if stinger.methods|length > 0 or stinger.properties|length > 0 %}
        // Take ownership of the RX channel that receives MQTT messages.  This will be moved into the loop_task.
        let mut message_receiver = {
            self.msg_streamer_rx.lock().unwrap().take().expect("msg_streamer_rx should be Some")
        };

        {%if stinger.methods|length > 0 -%}
        let method_handlers = self.method_handlers.clone();
        let _ = self.method_handlers.lock().await.initialize(self.clone()).await;
        {%endif-%}

        let sub_ids = self.subscription_ids.clone();

        {%-if stinger.methods|length > 0 %}
        let publisher = self.mqttier_client.clone();
        {%endif%}

        {%-if stinger.properties | length > 0 %}
        let properties = self.properties.clone();
        {%endif%}

        let interface_publisher = self.mqttier_client.clone();
        let instance_id = self.instance_id.clone();
        tokio::spawn(async move {
            let mut interval = tokio::time::interval(std::time::Duration::from_secs(120));
            loop {
                interval.tick().await;
                let info = crate::interface::InterfaceInfo::new()
                    .interface_name("{{stinger.name}}".to_string())
                    .title("{{stinger.title}}".to_string())
                    .version("{{stinger.version}}".to_string())
                    .instance(instance_id.clone())
                    .connection_topic(format!("client/{}/online", interface_publisher.client_id))
                    .build();
                let _ = interface_publisher.publish_status(format!("{{stinger.interface_info_topic}}", interface_publisher.client_id), &info, 150).await;
            }
        });
        let loop_task = tokio::spawn(async move {
            while let Some(msg) = message_receiver.recv().await {
                {%if stinger.properties | length > 0 %}
                let opt_resp_topic = msg.response_topic.clone();
                let opt_corr_data = msg.correlation_data.clone();
                {%endif%}
                
                {%-for method_name, method in stinger.methods.items()%}
                {%if not loop.first%}else {%endif%}if msg.subscription_id == sub_ids.{{method_name | snake_case}}_method_req {
                    {{stinger.rust.server_struct_name}}::handle_{{method_name|snake_case}}_request(publisher.clone(), method_handlers.clone(), msg).await;
                }
                {%-endfor%}{# methods #}
                {%if stinger.properties | length > 0 %}
                else {
                    let update_prop_future = {
                        {%-for prop_name, prop in stinger.properties.items()%}{%if not prop.read_only %}
                            {%if not loop.first %}else {%endif%}if msg.subscription_id == sub_ids.{{prop_name | snake_case}}_property_update {
                                {{stinger.rust.server_struct_name}}::update_{{prop_name | snake_case}}_value(publisher.clone(), properties.{{prop_name | snake_case}}_topic.clone(), properties.{{prop_name | snake_case}}.clone(), properties.{{prop_name | snake_case}}_tx_channel.clone(), msg).await
                            }
                        {%-endif%}{%endfor%}{# properties #}
                            else {
                                {{stinger.rust.server_struct_name}}::wrap_return_code_in_future(MethodReturnCode::NotImplemented("Could not find a property matching the request".to_string())).await
                            }
                    };
                    match update_prop_future.await {
                        Ok(_) => debug!("Successfully processed update  property"),
                        Err(e) => {
                            error!("Error processing update to '{{prop_name}}' property: {:?}", e);
                            if let Some(resp_topic) = opt_resp_topic {
                                {{stinger.rust.server_struct_name}}::publish_error_response(publisher.clone(), Some(resp_topic), opt_corr_data, &e).await;
                            } else {
                                warn!("No response topic found in message properties; cannot send error response.");
                            }
                        }
                    }
                }
                {%endif%}{# any properties #}
            }
        });
        let _ = tokio::join!(loop_task);
        {%endif%} {# any methods or properties #}
        
        warn!("Server receive loop completed. Exiting run_loop.");
        Ok(())
    }

}
{%if stinger.methods|length > 0 %}
#[async_trait]
pub trait {{stinger.name | UpperCamelCase }}MethodHandlers: Send + Sync {

    async fn initialize(&mut self, server: {{stinger.rust.server_struct_name}}) -> Result<(), MethodReturnCode>;

    {%for method_name, method in stinger.methods.items()-%}
    /// Pointer to a function to handle the {{method_name}} method request.
    async fn handle_{{method_name|snake_case}}(&self, {%for arg in method.arg_list%}{{arg.name|snake_case}}: {{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%}) -> Result<{{method.return_value_rust_type}}, MethodReturnCode>;
    
    {%endfor%}

    fn as_any(&self) -> &dyn Any;
}
{%endif%}{# methods #}