/*
DO NOT MODIFY THIS FILE{# <-- Ignore this because you are editing the template file. #}.  It is automatically generated and changes will be over-written
on the next generation.

This is the Client for the {{stinger.name}} interface.
*/

extern crate paho_mqtt as mqtt;
use futures::{StreamExt};
use connection::Connection;
{%if stinger.methods | length > 0 %}
use json::{JsonValue, object};
use std::collections::HashMap;
use uuid::Uuid;
use connection::return_structs::MethodResultCode;
{%endif%}
{%-set signal_ident_start=200%}
{%-set method_ident_start=100%}
{%-for sig_name, sig in stinger.signals.items() -%}
    {%set signal_ident_start=signal_ident_start + 1 %}
{%endfor%}
{%-for method_name, method in stinger.methods.items() -%}
    {%set method_ident_start=method_ident_start + 1 %}
{%endfor%}
pub struct {{stinger.name | UpperCamelCase }}Client {
    connection: Connection,
    subsc_id_start: u32,
    {%for sig_name, sig in stinger.signals.items()-%}
        signal_recv_callback_for_{{sig_name|snake_case}}: Box<dyn FnMut({%for arg in sig.arg_list%}{{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%})->()>,
    {%endfor%}
    {%-if stinger.methods | length > 0 %}pending_responses: HashMap::<Uuid, oneshot::Sender::<JsonValue>>,{%endif%}
}

impl {{stinger.name | UpperCamelCase }}Client {
    pub fn new(mut connection: Connection) -> {{stinger.name | UpperCamelCase }}Client {
        let subsc_id_start = connection.get_subcr_id_range_start();
        {%for method_name, method in stinger.methods.items()-%}
        connection.subscribe(String::from(format!("{{method.response_topic('{}')}}", connection.client_id)), 2, Some(subsc_id_start+{{method_ident_start + loop.index}}));
        {%endfor%}
        {%-for sig_name, sig in stinger.signals.items()-%}
        {%endfor%}
        
        let inst = {{stinger.name | UpperCamelCase }}Client {
            connection: connection,
            subsc_id_start: subsc_id_start,
            {%for sig_name, sig in stinger.signals.items()-%}
            signal_recv_callback_for_{{sig_name|snake_case}}: Box::new( |{%for arg in sig.arg_list-%}_{{loop.index}}{%if not loop.last%}, {%endif%}{%endfor%}| {} ),
            {%endfor%}
            {%if stinger.methods | length > 0 %}pending_responses: HashMap::new(),{%endif%}
        };
        connection.cli.set_message_callback(|cli, msg| inst.on_receive_message(cli, msg));
        inst
    }

    {%for sig_name, sig in stinger.signals.items()-%}
    pub fn set_signal_recv_callbacks_for_{{sig_name|snake_case}}(&mut self, cb: impl FnMut({%for arg in sig.arg_list%}{{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%})->() + 'static) {
        self.signal_recv_callback_for_{{sig_name|snake_case}} = Box::new(cb);
        self.connection.subscribe(String::from("{{sig.topic}}"), 2, Some({{signal_ident_start+loop.index}}));
    }
    {%endfor%}

    {%for method_name, method in stinger.methods.items()-%}
    pub async fn {{method_name|snake_case}}(&mut self, {%for arg in method.arg_list%}{{arg.name|snake_case}}: {{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%})->Result<{{method.return_value.rust_type}}, MethodResultCode> {
        let correlation_id = Uuid::new_v4();
        let (sender, receiver) = oneshot::channel();
        let correlation_id_str = format!("{}", correlation_id);
        self.pending_responses.insert(correlation_id, sender);
        let data = object!{
            correlationId: correlation_id_str,
            clientId: self.connection.client_id.clone(),
            {%-for arg in method.arg_list%}
            {%-if arg.arg_type.name.lower() == 'value'%}
            {{arg.name}}: {{arg.name|snake_case}},
            {%elif arg.arg_type.name.lower() == 'enum'%}
            {{arg.name}}: {{arg.name|snake_case}} as u32,
            {%endif-%}
            {%endfor%}
        };
        let data_str = json::stringify(data);
        let _ = self.connection.publish("{{method.topic}}".to_string(), data_str, 2, None).await;
        let resp_obj = receiver.recv().unwrap();
        
        {%-if method.return_value.arg_type.name.lower() == 'value' %}
        Ok(resp_obj["{{method.return_value.name}}"].as_{{method.return_value.rust_type}}().unwrap())
        {%-elif method.return_value.arg_type.name.lower() == 'enum'%}
        Ok({{arg.rust_type}}::from_u32(payload_object["{{arg.name}}"].as_u32().unwrap())
        {%-elif method.return_value.arg_type.name.lower() == 'struct'%}
        Ok({{method.return_value.rust_type}} { {%for member in method.return_value.members-%}
            {%if member.arg_type.name.lower() == 'value'%}
            {%if member.rust_type == 'String'%}
            {{member.name|snake_case}}: resp_obj["{{member.name}}"].as_str().unwrap().to_string(),
            {%-else%}
            {{member.name|snake_case}}: resp_obj["{{member.name}}"].as_{{member.rust_type}}().unwrap(),
            {%-endif-%}
            {%elif member.arg_type.name.lower() == 'enum'%}
            {{member.name|snake_case}}: {{member.rust_type}}::from_u32(resp_obj["{{member.name}}"].as_u32().unwrap()).unwrap(),
            {%endif%}
        {%endfor-%} })
                    
        {%-endif %}
    }

    fn handle_{{method_name|snake_case}}_response(&mut self, payload: String, opt_correlation_id: &Option<String>) {
        let payload_object = json::parse(&payload).unwrap();
        if opt_correlation_id.is_some() {
            let sender_opt = opt_correlation_id.as_ref()
                .and_then(|cid| Uuid::parse_str(cid.as_str()).ok())
                .and_then(|uuid| self.pending_responses.remove(&uuid));
            match sender_opt {
                Some(sender) => {
                    let oss: oneshot::Sender<JsonValue> = sender;
                    match oss.send(payload_object) {
                        Ok(_) => (),
                        Err(_) => ()
                    }
                },
                None => ()
            }
        }
    }
    {%endfor%}

    pub fn on_receive_message(&self, _cli: &mqtt::AsyncClient, msg: Option<mqtt::Message>) {
        print!("Received message: {}", msg.unwrap());
        ()
    }

    pub async fn unused(&mut self) {
        ()
    }

/*
    pub async fn process(&mut self) {
        print!("Processing connection stuff");
        while let Some(opt_msg) = self.connection.rx.next().await {
            if let Some(msg) = opt_msg {
                let payload_str = msg.payload_str().to_string();
                let payload_object = json::parse(&payload_str).unwrap();
                {%if stinger.methods | length > 0 %}
                let opt_corr_id_prop = msg.properties().iter(mqtt::PropertyCode::CorrelationData).next();
                let opt_corr_id_str = opt_corr_id_prop.and_then(|p| p.get_string());
                {%endif%}
                let prop_itr = msg.properties().iter(mqtt::PropertyCode::SubscriptionIdentifier);

                for subscription_identifier in prop_itr {
                    let subsc_id = subscription_identifier.get_u32().unwrap() - self.subsc_id_start;
                    match subsc_id {
                        {%-for method_name, method in stinger.methods.items()%}
                        {{method_ident_start + loop.index}} => {
                            self.handle_{{method_name|snake_case}}_response(msg.payload_str().to_string(), &opt_corr_id_str);
                        }
                        {%endfor-%}
                        {%for sig_name, sig in stinger.signals.items()-%}
                        {{signal_ident_start + loop.index}} => {
                            {%for arg in sig.arg_list-%}
                            {%-if arg.arg_type.name.lower() == 'value'%}
                            let temp_{{arg.name | snake_case}} = payload_object["{{arg.name}}"].{%if arg.rust_type == 'String'%}as_str().unwrap().to_string(){%else%}as_{{arg.rust_type}}().unwrap(){%endif%};
                            {%elif arg.arg_type.name.lower() == 'enum'%}
                            let temp_{{arg.name | snake_case}} = {{arg.rust_type}}::from_u32(payload_object["{{arg.name}}"].as_u32().unwrap()).unwrap();
                            {%endif%}
                            {%endfor%}
                            (self.signal_recv_callback_for_{{sig_name|snake_case}})({%for arg in sig.arg_list%}temp_{{arg.name | snake_case}}{%if not loop.last%}, {%endif%}{%endfor%});
                        }{%endfor%}
                        _ => ()
                    }
                }
            
            }
        }
    }
    */
}
