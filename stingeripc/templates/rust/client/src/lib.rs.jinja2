/*
DO NOT MODIFY THIS FILE{# <-- Ignore this because you are editing the template file. #}.  It is automatically generated and changes will be over-written
on the next generation.

This is the Client for the {{stinger.name}} interface.
*/

extern crate paho_mqtt as mqtt;
use connection::{MessagePublisher, Connection, ReceivedMessage};
{%if stinger.methods | length > 0 %}
use json::{JsonValue};
use std::collections::HashMap;
use uuid::Uuid;

#[allow(unused_imports)]
use connection::payloads::{*, MethodResultCode};
{%endif%}
use std::sync::{Arc, Mutex};
use tokio::sync::mpsc::{self, Sender, Receiver};

#[derive(Clone, Debug)]
struct {{stinger.name | UpperCamelCase }}SubscriptionIds {
    {%for method_name, method in stinger.methods.items()-%}
    {{method_name | snake_case}}: i32,
    {%endfor%}
}

pub struct {{stinger.name | UpperCamelCase }}Client {
    connection: Connection,
    {%for sig_name, sig in stinger.signals.items()-%}
        signal_recv_callback_for_{{sig_name|snake_case}}: Box<dyn FnMut({%for arg in sig.arg_list%}{{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%})->()>,
    {%endfor%}
    {%-if stinger.methods | length > 0 %}pending_responses: Arc<Mutex<HashMap::<Uuid, oneshot::Sender::<JsonValue>>>>,{%endif%}
    msg_streamer_rx: Receiver<ReceivedMessage>,
    msg_streamer_tx: Sender<ReceivedMessage>,
    msg_publisher: MessagePublisher,
    subscription_ids: {{stinger.name | UpperCamelCase }}SubscriptionIds,
}

impl {{stinger.name | UpperCamelCase }}Client {
    pub async fn new(mut connection: Connection) -> {{stinger.name | UpperCamelCase }}Client {
        let (rcvr_tx, rcvr_rx) = mpsc::channel(64);
        let publisher = connection.get_publisher();
        {%for method_name, method in stinger.methods.items()-%}
        let topic_{{method_name | snake_case}} = format!("{{method.response_topic('{}')}}", connection.client_id);
        let subscription_id_{{method_name | snake_case}} = connection.subscribe(&topic_{{method_name | snake_case}}, rcvr_tx.clone()).await;
        let subscription_id_{{method_name | snake_case}} = subscription_id_{{method_name | snake_case}}.unwrap_or_else(|_| -1);
        {%endfor%}
        let sub_ids = {{stinger.name | UpperCamelCase }}SubscriptionIds {
            {%for method_name, method in stinger.methods.items()-%}
            {{method_name | snake_case}}: subscription_id_{{method_name | snake_case}},
            {%-endfor%}
        };
        let inst = {{stinger.name | UpperCamelCase }}Client {
            connection: connection,
            {%for sig_name, sig in stinger.signals.items()-%}
            signal_recv_callback_for_{{sig_name|snake_case}}: Box::new( |{%for arg in sig.arg_list-%}_{{loop.index}}{%if not loop.last%}, {%endif%}{%endfor%}| {} ),
            {%endfor%}
            {%if stinger.methods | length > 0 %}pending_responses: Arc::new(Mutex::new(HashMap::new())),{%endif%}
            msg_streamer_rx: rcvr_rx,
            msg_streamer_tx: rcvr_tx,
            msg_publisher: publisher,
            subscription_ids: sub_ids,
        };
        inst
    }

    {%for sig_name, sig in stinger.signals.items()-%}
    pub async fn set_signal_recv_callbacks_for_{{sig_name|snake_case}}(&mut self, cb: impl FnMut({%for arg in sig.arg_list%}{{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%})->() + 'static) {
        self.signal_recv_callback_for_{{sig_name|snake_case}} = Box::new(cb);
        self.connection.subscribe("{{sig.topic}}", self.msg_streamer_tx.clone()).await;
    }
    {%endfor%}

    {%for method_name, method in stinger.methods.items()-%}
    pub async fn {{method_name|snake_case}}(&mut self, {%for arg in method.arg_list%}{{arg.name|snake_case}}: {{arg.rust_type}}{%if not loop.last%}, {%endif%}{%endfor%})->Result<{{method.return_value.rust_type}}, MethodResultCode> {
        let correlation_id = Uuid::new_v4();
        let (sender, receiver) = oneshot::channel();
        {
            let mut hashmap = self.pending_responses.lock().expect("Mutex was poisoned");
            hashmap.insert(correlation_id.clone(), sender);
        }
        let data = connection::payloads::{{method_name | UpperCamelCase}}RequestObject {
            {%-for arg in method.arg_list%}
            {{arg.name}}: {{arg.name|snake_case}},
            {%-endfor%}
        };
        let _ = self.msg_publisher.publish_request_structure("{{method.topic}}".to_string(), &data, "", correlation_id).await;
        let resp_obj = receiver.recv().unwrap();
        
        {%-if method.return_value.arg_type.name.lower() == 'value' %}
        Ok(resp_obj["{{method.return_value.name}}"].as_{{method.return_value.rust_type}}().unwrap())
        {%-elif method.return_value.arg_type.name.lower() == 'enum'%}
        Ok({{arg.rust_type}}::from_u32(payload_object["{{arg.name}}"].as_u32().unwrap())
        {%-elif method.return_value.arg_type.name.lower() == 'struct'%}
        Ok({{method.return_value.rust_type}} { {%for member in method.return_value.members-%}
            {%if member.arg_type.name.lower() == 'value'%}
            {%if member.rust_type == 'String'%}
            {{member.name|snake_case}}: resp_obj["{{member.name}}"].as_str().unwrap().to_string(),
            {%-else%}
            {{member.name|snake_case}}: resp_obj["{{member.name}}"].as_{{member.rust_type}}().unwrap(),
            {%-endif-%}
            {%elif member.arg_type.name.lower() == 'enum'%}
            {{member.name|snake_case}}: {{member.rust_type}}::from_u32(resp_obj["{{member.name}}"].as_u32().unwrap()).unwrap(),
            {%endif%}
        {%endfor-%} })
                    
        {%-endif %}
    }

    fn handle_{{method_name|snake_case}}_response(pending_responses: Arc<Mutex<HashMap::<Uuid, oneshot::Sender::<JsonValue>>>>, payload: String, opt_correlation_id: Option<String>) {
        let payload_object = json::parse(&payload).unwrap();
        if opt_correlation_id.is_some() {
            let sender_opt = opt_correlation_id.as_ref()
                .and_then(|cid| Uuid::parse_str(cid.as_str()).ok())
                .and_then(|uuid| {
                    let mut hashmap = pending_responses.lock().expect("Mutex was poisoned");
                    hashmap.remove(&uuid)
                });
            match sender_opt {
                Some(sender) => {
                    let oss: oneshot::Sender<JsonValue> = sender;
                    match oss.send(payload_object) {
                        Ok(_) => (),
                        Err(_) => ()
                    }
                },
                None => ()
            }
        }
    }
    {%endfor%}

    pub async fn process_loop(&mut self) {
        let resp_map = self.pending_responses.clone();
        let receiver = &self.msg_streamer_rx;
        let mut streamer = self.connection.get_streamer().await;
        let task1 = tokio::spawn(async move {
            streamer.receive_loop().await;
        });

        let sub_ids = self.subscription_ids.clone();
        let task2 = tokio::spawn(async move {
            while let Some(msg) = receiver.recv().await {
                println!("Received message: {:?}", msg.message.payload_str());
                {%-for method_name, method in stinger.methods.items()%}
                {%if not loop.first%}else {%endif%}if msg.subscription_id == sub_ids.{{method_name | snake_case}} {
                    {{stinger.name | UpperCamelCase }}Client::handle_{{method_name|snake_case}}_response(resp_map.clone(), msg.message.payload_str().to_string(), None);
                }
                {%-endfor%}
            }
        });

        task1.await;
        task2.await;
    }
}
