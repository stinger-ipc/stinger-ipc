/*
DO NOT MODIFY THIS FILE {# unless you see this comment #}.  It is automatically generated and changes will be over-written
on the next generation.

It contains enumerations used by the {{stinger.name}} interface.
*/

{%if stinger.enums | length > 0%}
use std::fmt;
use num_derive::FromPrimitive;
use num_traits::FromPrimitive;
{%endif%}
use serde::Serialize;

{%for ie_name, ie in stinger.enums.items() %}
#[derive(Debug, FromPrimitive)]
pub enum {{ie_name | UpperCamelCase }} {
    {%-for value in ie.values %}
    {{value | UpperCamelCase}} = {{loop.index}}{%if not loop.last%},{%endif%}
    {%-endfor%}
}

#[allow(dead_code)]
impl {{ie_name | UpperCamelCase }} {
    pub fn from_u32(value: u32) -> Option<Self> {
        FromPrimitive::from_u32(value)
    }
}

impl fmt::Display for {{ie_name | UpperCamelCase }} {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
       write!(f, "{:?}", self)
    }
}
{%endfor%}

#[allow(dead_code)]
pub enum MethodResultCode { {%-for rc_i, rc_name in stinger.method_return_codes.items()%}
    {{rc_name | UpperCamelCase}} = {{rc_i}},
    {%-endfor%}
}

{%for method_name, method in stinger.methods.items()%}
#[allow(dead_code, non_snake_case)]
#[derive(Clone, Debug, Serialize)]
pub struct {{method_name | UpperCamelCase}}RequestObject {
    {%-for arg in method.arg_list%}
    {%-if arg.arg_type.name.lower() == 'value'%}
    pub {{arg.name}}: {{arg.rust_type}},
    {%-elif arg.arg_type.name.lower() == 'enum'-%}
    pub {{arg.name}}: u32,
    {%endif-%}
    {%endfor%}
}
{%if method.return_value.arg_type.name.lower() == 'struct'%}
#[allow(dead_code)]
pub struct {{method.return_value.rust_local_type}} {
{%-for arg in method.return_value.members%}
    pub {{arg.name}}: {{arg.rust_local_type}},
{%-endfor%}
}
{%endif-%}
{%endfor%}
